import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom'; // useParams for getting the SUBCATEGORYID from the URL
import './SubCategory.css'; // CSS for styling the page
import Footer from '../components/Footer'; // Footer component for the page

const SubCategory = ({ isEditMode }) => {
  const [categories, setCategories] = useState([]); // Store fetched categories
  const [subcategoryName, setSubcategoryName] = useState('');
  const [subcategoryDesc, setSubcategoryDesc] = useState('');
  const [categoryID, setCategoryID] = useState('');
  const [subcategoryStatus, setSubcategoryStatus] = useState('T'); // Default status 'T'
  const [subcategoryID, setSubcategoryID] = useState(''); // Store the subcategory ID for editing

  const navigate = useNavigate();
  const { id } = useParams(); // Get SUBCATEGORYID from the URL (for update)

  // Fetch categories to select CATEGORYID
  useEffect(() => {
    fetch('https://www.storezan.com/webapi/STORE/category', {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    })
      .then((response) => response.json())
      .then((data) => {
        setCategories(data.category);
      })
      .catch((error) => console.error('Error fetching category data:', error));
  }, []);

  // Fetch subcategory details if editing
  useEffect(() => {
    if (isEditMode && id) {
      fetch(`https://www.storezan.com/webapi/STORE/getsubcategory?SUBCATEGORYID=${id}`, {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
        },
      })
        .then((response) => response.json())
        .then((data) => {
          const subcategory = data.subcategory[0]; // Assuming the response returns subcategory data in this format
          setSubcategoryID(subcategory.SUBCATEGORYID);
          setSubcategoryName(subcategory.SUBCATEGORYNAME);
          setSubcategoryDesc(subcategory.SUBCATEGORYDESC);
          setCategoryID(subcategory.CATEGORYID);
          setSubcategoryStatus(subcategory.SUBCATEGORYSTATUS);
        })
        .catch((error) => console.error('Error fetching subcategory data:', error));
    }
  }, [isEditMode, id]);

  // Handle subcategory form submission for add or update
  const handleSubmit = (e) => {
    e.preventDefault();

    const url = isEditMode
      ? `https://www.storezan.com/webapi/STORE/updatesubcategory?SUBCATEGORYID=${subcategoryID}&SUBCATEGORYNAME=${subcategoryName}&SUBCATEGORYDESC=${subcategoryDesc}&CATEGORYID=${categoryID}&SUBCATEGORYSTATUS=${subcategoryStatus}`
      : `https://www.storezan.com/webapi/STORE/savesubcategory?SUBCATEGORYNAME=${subcategoryName}&SUBCATEGORYDESC=${subcategoryDesc}&CATEGORYID=${categoryID}`;

    fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.status && data.status[0].stat === 'T') {
          alert(isEditMode ? 'Subcategory updated successfully!' : 'Subcategory added successfully!');
        } else {
          alert(isEditMode ? 'Failed to update subcategory.' : 'Failed to add subcategory.');
        }
      })
      .catch((error) => console.error('Error saving subcategory:', error));
  };

  return (
    <div className="subcategory-page">
      <div className="breadcrumb">Dashboard / {isEditMode ? 'Edit' : 'Add'} Subcategory</div>

      <div className="small-heading">
        <h4>{isEditMode ? 'Edit Subcategory' : 'Add Subcategory'}</h4>
      </div>

      <form onSubmit={handleSubmit} className="subcategory-form">
        <div className="form-group">
          <label htmlFor="subcategoryName">Subcategory Name:</label>
          <input
            type="text"
            id="subcategoryName"
            value={subcategoryName}
            onChange={(e) => setSubcategoryName(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label htmlFor="subcategoryDesc">Description:</label>
          <input
            type="text"
            id="subcategoryDesc"
            value={subcategoryDesc}
            onChange={(e) => setSubcategoryDesc(e.target.value)}
            required
          />
        </div>

        <div className="form-group">
          <label htmlFor="categoryID">Select Category:</label>
          <select
            id="categoryID"
            value={categoryID}
            onChange={(e) => setCategoryID(e.target.value)}
            required
          >
            <option value="">-- Select Category --</option>
            {categories.map((category) => (
              <option key={category.CATID} value={category.CATID}>
                {category.CATNAME}
              </option>
            ))}
          </select>
        </div>

        {isEditMode && (
          <div className="form-group">
            <label htmlFor="subcategoryStatus">Subcategory Status:</label>
            <select
              id="subcategoryStatus"
              value={subcategoryStatus}
              onChange={(e) => setSubcategoryStatus(e.target.value)}
              required
            >
              <option value="T">Active</option>
              <option value="F">Inactive</option>
            </select>
          </div>
        )}

        <button type="submit" className="submit-btn">
          {isEditMode ? 'Update Subcategory' : 'Save Subcategory'}
        </button>
      </form>

      <Footer />
    </div>
  );
};

export default SubCategory;

