import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './SubCategory.css'; // CSS for styling the page
import Footer from '../components/Footer'; // Footer component for the page

const SubCategory = () => {
  const [categories, setCategories] = useState([]); // Store fetched categories
  const [subcategories, setSubcategories] = useState([]); // Store fetched subcategories
  const [selectedSubcategories, setSelectedSubcategories] = useState([]); // Store selected subcategories

  const navigate = useNavigate();

  // Fetch categories to select CATEGORYID
  useEffect(() => {
    fetch('https://www.storezan.com/webapi/STORE/category', {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    })
      .then((response) => response.json())
      .then((data) => {
        // Ensure data.category exists before setting it
        if (data && data.category) {
          setCategories(data.category);
        } else {
          console.error('Category data is missing or not properly structured.');
        }
      })
      .catch((error) => console.error('Error fetching category data:', error));
  }, []);

  // Fetch subcategories to display in table
  useEffect(() => {
    fetch('https://www.storezan.com/webapi/STORE/getsubcategory', {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    })
      .then((response) => response.json())
      .then((data) => {
        // Ensure data.subcategory exists before setting it
        if (data && data.subcategory) {
          setSubcategories(data.subcategory);
        } else {
          console.error('Subcategory data is missing or not properly structured.');
        }
      })
      .catch((error) => console.error('Error fetching subcategory data:', error));
  }, []);

  // Handle subcategory selection
  const handleSelectSubcategory = (subcategoryId) => {
    if (selectedSubcategories.includes(subcategoryId)) {
      setSelectedSubcategories(
        selectedSubcategories.filter((id) => id !== subcategoryId)
      );
    } else {
      setSelectedSubcategories([...selectedSubcategories, subcategoryId]);
    }
  };

  return (
    <div className="subcategory-page">
      <div className="breadcrumb">Dashboard / Subcategory</div>

      <div className="small-heading">
        <h4>Add or Modify Subcategory</h4>
      </div>

      {/* Table for displaying subcategories */}
      <table className="subcategory-table">
        <thead>
          <tr>
            <th>Select</th>
            <th>Subcategory Name</th>
            <th>Description</th>
            <th>Category Name</th>
          </tr>
        </thead>
        <tbody>
          {subcategories && subcategories.length > 0 ? (
            subcategories.map((subcategory) => (
              <tr key={subcategory.SUBCATEGORYID}>
                <td>
                  <input
                    type="checkbox"
                    checked={selectedSubcategories.includes(subcategory.SUBCATEGORYID)}
                    onChange={() => handleSelectSubcategory(subcategory.SUBCATEGORYID)}
                  />
                </td>
                <td>{subcategory.SUBCATEGORYNAME}</td>
                <td>{subcategory.SUBCATEGORYDESC}</td>
                <td>{subcategory.CATEGORYNAME}</td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="4">No subcategories available</td>
            </tr>
          )}
        </tbody>
      </table>

      <Footer />
    </div>
  );
};

export default SubCategory;
