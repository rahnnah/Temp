'use client'

import { useState, useEffect } from 'react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { AlertCircle, Loader2, Trash2, X, Plus } from "lucide-react"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import Footer from '@/components/Footer'

type Category = {
  CATID: string
  CATNAME: string
}

type Subcategory = {
  SUBCATID: string
  SUBCATEGORYNAME: string
  CATEGORYID: string
  SUBCATEGORYDESC: string
}

export default function SubCategoryPage() {
  const [categories, setCategories] = useState<Category[]>([])
  const [subcategories, setSubcategories] = useState<Subcategory[]>([])
  const [subcategoryName, setSubcategoryName] = useState('')
  const [subcategoryDesc, setSubcategoryDesc] = useState('')
  const [categoryID, setCategoryID] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    fetchCategories()
    fetchSubcategories()
  }, [])

  const fetchCategories = async () => {
    try {
      const response = await fetch('https://www.storezan.com/webapi/STORE/category', {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      })
      if (!response.ok) throw new Error('Failed to fetch categories')
      const data = await response.json()
      setCategories(data.category)
    } catch (error) {
      setError('Error fetching categories. Please try again.')
    }
  }

  const fetchSubcategories = async () => {
    try {
      const response = await fetch('https://www.storezan.com/webapi/STORE/subcategories', {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      })
      if (!response.ok) throw new Error('Failed to fetch subcategories')
      const data = await response.json()
      setSubcategories(data.subcategory)
    } catch (error) {
      setError('Error fetching subcategories. Please try again.')
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)
    setError(null)

    const url = `https://www.storezan.com/webapi/STORE/savesubcategory?SUBCATEGORYNAME=${subcategoryName}&SUBCATEGORYDESC=${subcategoryDesc}&CATEGORYID=${categoryID}`

    try {
      const response = await fetch(url, {
        method: 'GET',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      })
      if (!response.ok) throw new Error('Failed to save subcategory')
      const data = await response.json()
      if (data.status && data.status[0].stat === 'T') {
        await fetchSubcategories() // Refresh the subcategories list
        setSubcategoryName('')
        setSubcategoryDesc('')
        setCategoryID('')
      } else {
        throw new Error('Failed to save subcategory')
      }
    } catch (error) {
      setError('Failed to save subcategory. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleRemove = async (id: string) => {
    try {
      const response = await fetch(`https://www.storezan.com/webapi/STORE/deletesubcategory?SUBCATEGORYID=${id}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      })
      if (!response.ok) throw new Error('Failed to remove subcategory')
      const data = await response.json()
      if (data.status && data.status[0].stat === 'T') {
        await fetchSubcategories() // Refresh the subcategories list
      } else {
        throw new Error('Failed to remove subcategory')
      }
    } catch (error) {
      setError('Failed to remove subcategory. Please try again.')
    }
  }

  const handleCancel = () => {
    setSubcategoryName('')
    setSubcategoryDesc('')
    setCategoryID('')
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="text-sm breadcrumbs mb-4">
        <ul>
          <li>Dashboard</li>
          <li>Subcategory</li>
        </ul>
      </div>

      <Card className="mb-8">
        <CardHeader>
          <CardTitle>Add Subcategory</CardTitle>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="subcategoryName" className="text-sm font-medium">
                Subcategory Name
              </label>
              <Input
                id="subcategoryName"
                value={subcategoryName}
                onChange={(e) => setSubcategoryName(e.target.value)}
                required
              />
            </div>

            <div className="space-y-2">
              <label htmlFor="subcategoryDesc" className="text-sm font-medium">
                Description
              </label>
              <Input
                id="subcategoryDesc"
                value={subcategoryDesc}
                onChange={(e) => setSubcategoryDesc(e.target.value)}
                required
              />
            </div>

            <div className="space-y-2">
              <label htmlFor="categoryID" className="text-sm font-medium">
                Select Category
              </label>
              <Select value={categoryID} onValueChange={setCategoryID}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((category) => (
                    <SelectItem key={category.CATID} value={category.CATID}>
                      {category.CATNAME}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            {error && (
              <Alert variant="destructive">
                <AlertCircle className="h-4 w-4" />
                <AlertTitle>Error</AlertTitle>
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}

            <div className="flex space-x-2">
              <Button type="submit" disabled={isLoading} className="w-full">
                {isLoading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Please wait
                  </>
                ) : (
                  'Save Subcategory'
                )}
              </Button>
              <Button variant="secondary" onClick={handleCancel} className="w-full">
                Cancel
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Subcategories</CardTitle>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead className="w-[50px]">Select</TableHead>
                <TableHead>Subcategory Name</TableHead>
                <TableHead>Category</TableHead>
                <TableHead className="text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {subcategories.map((subcategory) => (
                <TableRow key={subcategory.SUBCATID}>
                  <TableCell>
                    <input type="radio" name="selectedSubcategory" className="form-radio" />
                  </TableCell>
                  <TableCell>{subcategory.SUBCATEGORYNAME}</TableCell>
                  <TableCell>
                    {categories.find(cat => cat.CATID === subcategory.CATEGORYID)?.CATNAME || 'Unknown'}
                  </TableCell>
                  <TableCell className="text-right">
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => {
                        setSubcategoryName(subcategory.SUBCATEGORYNAME)
                        setSubcategoryDesc(subcategory.SUBCATEGORYDESC)
                        setCategoryID(subcategory.CATEGORYID)
                      }}
                    >
                      <Plus className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="destructive"
                      size="icon"
                      onClick={() => handleRemove(subcategory.SUBCATID)}
                      className="ml-2"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="icon" className="ml-2">
                      <X className="h-4 w-4" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>

      <Footer />
    </div>
  )
}
