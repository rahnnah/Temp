import React, { useEffect, useState } from "react";
import axios from "axios";

const AddSubcategory = ({ subcategoryID, setSubcategoryID, resetEditingState }) => {
  const [subcategoryName, setSubcategoryName] = useState("");
  const [subcategoryDesc, setSubcategoryDesc] = useState("");
  const [subcategoryStatus, setSubcategoryStatus] = useState("T");
  const [categoryID, setCategoryID] = useState("");
  const [categories, setCategories] = useState([]);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get("api-endpoint-for-fetching-categories");
        setCategories(response.data);
      } catch (error) {
        console.error("Error fetching categories", error);
      }
    };

    fetchCategories();
  }, []);

  useEffect(() => {
    if (subcategoryID) {
      // Fetch the subcategory details when the subcategoryID is provided
      const fetchSubcategory = async () => {
        try {
          const response = await axios.get(`api-endpoint-for-subcategory/${subcategoryID}`);
          setSubcategoryName(response.data.name);
          setSubcategoryDesc(response.data.description);
          setCategoryID(response.data.categoryID);
          setSubcategoryStatus(response.data.status);
        } catch (error) {
          console.error("Error fetching subcategory", error);
        }
      };

      fetchSubcategory();
    } else {
      resetForm();
    }
  }, [subcategoryID]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      if (subcategoryID) {
        // Update subcategory
        await axios.put(`api-endpoint-for-update/${subcategoryID}`, {
          name: subcategoryName,
          description: subcategoryDesc,
          categoryID,
          status: subcategoryStatus,
        });
        setError("");
      } else {
        // Add new subcategory
        await axios.post("api-endpoint-for-adding-subcategory", {
          name: subcategoryName,
          description: subcategoryDesc,
          categoryID,
        });
        setError("");
      }
      resetForm();
    } catch (error) {
      setError("Error saving subcategory. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const resetForm = () => {
    setSubcategoryName("");
    setSubcategoryDesc("");
    setCategoryID("");
    setSubcategoryStatus("T");
    setError("");
    setSubcategoryID(null);
  };

  const handleRemove = async (id) => {
    setIsLoading(true);
    try {
      await axios.delete(`api-endpoint-for-delete/${id}`);
      resetForm();
    } catch (error) {
      setError("Error removing subcategory. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        value={subcategoryName}
        onChange={(e) => setSubcategoryName(e.target.value)}
        placeholder="Subcategory Name"
        required
      />
      <input
        value={subcategoryDesc}
        onChange={(e) => setSubcategoryDesc(e.target.value)}
        placeholder="Description"
        required
      />
      <select value={categoryID} onChange={(e) => setCategoryID(e.target.value)} required>
        <option value="">Select Category</option>
        {categories.map((category) => (
          <option key={category.CATID} value={category.CATID}>
            {category.CATNAME}
          </option>
        ))}
      </select>

      {subcategoryID && (
        <select value={subcategoryStatus} onChange={(e) => setSubcategoryStatus(e.target.value)}>
          <option value="T">Active</option>
          <option value="F">Inactive</option>
        </select>
      )}

      {error && <p>{error}</p>}

      {/* Add the buttons */}
      <div className="button-group">
        <button type="submit" className="btn btn-primary" disabled={isLoading}>
          {isLoading ? 'Please wait...' : subcategoryID ? 'Update Subcategory' : 'Add'}
        </button>
        <button type="button" className="btn btn-danger" onClick={resetForm}>
          Cancel
        </button>
        {subcategoryID && (
          <button
            type="button"
            className="btn btn-danger"
            onClick={() => handleRemove(subcategoryID)}
          >
            Remove
          </button>
        )}
      </div>
    </form>
  );
};

export default AddSubcategory;

